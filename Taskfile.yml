version: '3'

dotenv: ['.env', 'secrets/.env']

vars:
  TASK_PORT: 22180
  BUILD_FOLDER: bin
  TUNNEL_FOLDER: bin/tunnel
  TUNNEL_LOGFILE: "{{.TUNNEL_FOLDER}}/tunnel.log" # cloudflared background process logs output
  TUNNEL_URLFILE: "{{.TUNNEL_FOLDER}}/tunnel.url" # dynamic URL for the tunnel

tasks:
  build:
    desc: Build the go application
    cmds:
      - go build -o {{.BUILD_FOLDER}}/terraform-run-task
  run:
    desc: Run the application
    dir: "{{.BUILD_FOLDER}}"
    cmds:
      - "./terraform-run-task -port {{.TASK_PORT}}"


  tunnel-start:
    desc: Start cloudflare tunnel and extract URL to url.txt
    silent: true
    cmds:
      - |
        # Check if cloudflared tunnel is already running
        if pgrep -f "cloudflared tunnel" > /dev/null; then
          echo "Tunnel is already running"
          exit 0
        fi
        # Create directory if not exists
        mkdir -p {{.TUNNEL_FOLDER}}
        # Remove existing files if they exist
        rm -f {{.TUNNEL_LOGFILE}} {{.TUNNEL_URLFILE}}

        echo "Starting tunnel, logs found: {{.TUNNEL_LOGFILE}}"
        cloudflared tunnel --url http://localhost:{{.TASK_PORT}} > {{.TUNNEL_LOGFILE}} 2>&1 &
        # cloudflared tunnel --url http://localhost:{{.TASK_PORT}} 2>&1 | tee {{.TUNNEL_LOGFILE}} &
        
        # Monitor the log file for URL pattern
        timeout=10  # seconds
        counter=0        
        while [ $counter -lt $timeout ]; do
          if [ -f {{.TUNNEL_LOGFILE}} ]; then
            # Look for URL pattern in the log
            URL=$(grep -oE 'https://[a-zA-Z0-9-]+\.trycloudflare\.com' {{.TUNNEL_LOGFILE}} | tail -1)
            if [ ! -z "$URL" ]; then
              echo "$URL" > {{.TUNNEL_URLFILE}}
              echo "Found tunnel URL: $URL"
              break
            fi
          fi
          sleep 1
          counter=$((counter + 1))
        done
        
        echo "Tunnel is running in the background..."
  tunnel-stop:
    cmds: 
      - |
        echo "Kill any running processes with 'cloudflared tunnel'"
        kill -9 $(pgrep -f "cloudflared tunnel")
  healthcheck:
    desc: Check health using dynamic tunnel URL from url.txt
    cmds:
      - |
        if [ -f {{.TUNNEL_FOLDER}}/url.txt ]; then
          DYNAMIC_URL=$(cat {{.TUNNEL_FOLDER}}/url.txt)
          echo "Using dynamic URL: $DYNAMIC_URL/healthcheck"
          curl -v -H "Content-Type: application/json" "$DYNAMIC_URL/healthcheck"
        else
          echo "No tunnel URL found in url.txt. Run 'task tunnel-with-url' first."
        fi
